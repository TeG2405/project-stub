$clear: left, right, both, none;
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @each $prop in $clear {
      .clear#{$infix}-#{$prop} { clear: $prop !important; }
    }
  }
}

// Управление размерами шрифта
$font-sizes: () !default;
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @each $key, $value in $font-sizes {
      .font-size#{$infix}-#{$key} { font-size: $value !important; }
    }
  }
}

// Управление z-index
$zindex: () !default;
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @each $key, $value in $zindex {
      .zindex#{$infix}-#{$key} { z-index: $value !important; }
    }
  }
}

// Расширяем размерность "sizing" до breakpoint
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @if ($infix != '') {
      @each $prop, $abbrev in (width: w, height: h) {
        @each $size, $length in $sizes {
          .#{$abbrev}#{$infix}-#{$size} { #{$prop}: $length !important; }
        }
      }
    }
  }
}

// Расширяем позиционированеи "position" до breakpoint
$positions: static, relative, absolute, fixed, sticky;
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @if ($infix != '') {
      @each $position in $positions {
        .position#{$infix}-#{$position} { position: $position !important; }
      }
    }
  }
}

// Расширяем цвета bg-color
@each $color, $value in $colors {
  @include bg-variant(".bg-#{$color}", $value);
}

// Поддержка старого синтаксиса для responsive utility
$display: block, inline, inline-block, flex;
.hidden-xs {
  display: none !important;
  @include media-breakpoint-up(sm) {
    display: block !important;
  }
}
.visible-xs{
  @include media-breakpoint-up(sm) {
    display: none !important;
  }
}
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
  .hidden#{$infix} {
    @include media-breakpoint-down($breakpoint) {
      display: none !important;
    }
  }
  .visible#{$infix}{
    @if ($infix != '') {
      display: none !important;
    }
    @include media-breakpoint-up($breakpoint) {
      display: block !important;
    }
  }
  @each $prop in $display {
    .visible#{$infix}-#{$prop} {
      @if ($infix != '') {
        display: none !important;
      }
      @include media-breakpoint-up($breakpoint) {
        display: $prop !important;
      }
    }
  }

  // Классы контроля оринтации экрана
  .d-landscape#{$infix}-none{
    @media (orientation: landscape) {
      display: none !important;
    }
  }
  .d-portrait#{$infix}-none{
    @media (orientation: portrait) {
      display:  none !important;
    }
  }
}